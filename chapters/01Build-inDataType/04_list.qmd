# Sequence Type

In Python, **sequence types** are data types that represent **ordered collections of items**. The main built-in sequence types are:

## 1. `list`

* **Mutable** (can be changed after creation)
* Can hold mixed data types
* Uses square brackets `[]`

#### Example

```python
my_list = [1, 2, 3, 'a', True]
my_list[0] = 100        # Lists are mutable
print(my_list)          # [100, 2, 3, 'a', True]
```

## 2. `tuple`

* **Immutable** (cannot be changed after creation)
* Uses parentheses `()`

#### Example

```python
my_tuple = (1, 2, 3, 'a', True)
# my_tuple[0] = 100      ❌ This will raise an error
print(my_tuple[1])       # 2
```

## 3. `range`

* Represents a sequence of numbers
* Often used in loops
* Memory efficient (generates values on demand)

#### Example

```python
r = range(0, 10, 2)
print(list(r))           # [0, 2, 4, 6, 8]
```

## Common Sequence Operations
Here are the **common sequence operations** in Python that apply to `list`, `tuple`, and `range` (and even `str`):

### **1. Indexing**

Access an element by position (starts from 0):

```python
seq = [10, 20, 30]
print(seq[1])  # 20
```
### **2. Slicing**

Extract a portion of the sequence:

```python
seq = [0, 1, 2, 3, 4, 5]
print(seq[1:4])     # [1, 2, 3]
print(seq[:3])      # [0, 1, 2]
print(seq[::2])     # [0, 2, 4]
```


### **3. Length**

Get the number of items:

```python
len([1, 2, 3])  # 3
```


### **4. Membership Test**

Check if a value exists in the sequence:

```python
3 in [1, 2, 3]        # True
'x' in ('a', 'b')     # False
```


### **5. Iteration**

Loop through items:

```python
for item in (1, 2, 3):
    print(item)
```


### **6. Concatenation**

Combine two sequences of the same type:

```python
[1, 2] + [3, 4]     # [1, 2, 3, 4]
(1, 2) + (3, 4)     # (1, 2, 3, 4)
```

> `range` does **not** support `+` directly.


### **7. Repetition**

Repeat the sequence:

```python
[1, 2] * 3       # [1, 2, 1, 2, 1, 2]
(1,) * 4         # (1, 1, 1, 1)
```


### **8. Min, Max, Sum**

Work on sequences of numbers:

```python
min([3, 1, 2])    # 1
max((3, 1, 2))    # 3
sum(range(5))     # 0+1+2+3+4 = 10
```


### **9. Count / Index (list & tuple only)**

```python
[1, 2, 2, 3].count(2)    # 2
(1, 2, 3).index(2)       # 1
```


### **10. Type Conversion**

Convert between types:

```python
tuple([1, 2])     # (1, 2)
list((3, 4))      # [3, 4]
list(range(3))    # [0, 1, 2]
```

## Common Features (Shared by All Three)

* **Indexing**: Access elements by index (`seq[0]`)
* **Slicing**: Get sub-sequences (`seq[1:4]`)
* **Iteration**: You can loop through them (`for x in seq`)
* **`len()`**: Get the number of items
* **`in` keyword**: Check membership (`x in seq`)
* **Concatenation & repetition**: Use `+` and `*` (except `range`)


### Comparison

| Feature   | `list`      | `tuple`    | `range`       |
| --------- | ----------- | ---------- | ------------- |
| Mutable   | ✅ Yes       | ❌ No       | ❌ No          |
| Syntax    | `[1, 2]`    | `(1, 2)`   | `range(2)`    |
| Iterable  | ✅           | ✅          | ✅             |
| Indexable | ✅           | ✅          | ✅             |
| Sliceable | ✅           | ✅          | ✅             |
| Efficient | Moderate    | More       | Most (lazy)   |
| Use case  | General use | Fixed data | Numeric loops |


## **Common Sequence Operations Table**

| Operation              | Result / Description                                       | Notes  |
| ---------------------- | ---------------------------------------------------------- | ------ |
| `x in s`               | `True` if an item of `s` is equal to `x`, else `False`     | (1)    |
| `x not in s`           | `True` if no item of `s` is equal to `x`, else `False`     | (1)    |
| `s + t`                | Concatenation of sequences `s` and `t`                     | (6)(7) |
| `s * n` or `n * s`     | Repeats sequence `s` `n` times                             | (2)(7) |
| `s[i]`                 | `i`-th item of `s`, index starts at 0                      | (3)(9) |
| `s[i:j]`               | Slice from `i` to `j` (excluding `j`)                      | (3)(4) |
| `s[i:j:k]`             | Slice from `i` to `j` with step `k`                        | (3)(5) |
| `len(s)`               | Number of elements in `s`                                  |        |
| `min(s)`               | Smallest item in `s`                                       |        |
| `max(s)`               | Largest item in `s`                                        |        |
| `s.index(x[, i[, j]])` | First index of `x` in `s` (optionally between `i` and `j`) | (8)    |
| `s.count(x)`           | Number of times `x` appears in `s`                         |        |



### Notes:

* **(1)** Works for all sequence types (`list`, `tuple`, `str`, `range`)
* **(2)** `s * 0` returns an empty sequence of the same type
* **(3)** Negative indices count from the end (`s[-1]` is the last item)
* **(4)** `i` is inclusive, `j` is exclusive: `s[1:4]` gives 3 elements (index 1, 2, 3)
* **(5)** `k` is the step (e.g. `s[::2]` gets every second element)
* **(6)** Sequences must be of the **same type** for `+` to work
* **(7)** `range` does **not** support `+` or `*` directly
* **(8)** Raises `ValueError` if `x` not found
* **(9)** Raises `IndexError` if `i` is out of range


### **Mutable Operations for `list`**


| Operation                         | Description                                                                  |
| --------------------------------- | ---------------------------------------------------------------------------- |
| `s.append(x)`                     | Adds `x` to the **end** of the list                                          |
| `s.extend(iterable)`              | Appends **all elements** from another iterable (like a list or tuple)        |
| `s.insert(i, x)`                  | Inserts `x` **at index `i`** (shifts other elements to the right)            |
| `s.remove(x)`                     | Removes **first occurrence** of `x`; raises `ValueError` if not found        |
| `s.pop([i])`                      | Removes and returns the **item at index `i`** (default: last item)           |
| `s.clear()`                       | Removes **all items** from the list                                          |
| `s.index(x[, start[, end]])`      | Returns the **index** of first occurrence of `x` (raises error if not found) |
| `s.count(x)`                      | Returns number of times `x` appears in the list                              |
| `s.reverse()`                     | Reverses the list **in-place**                                               |
| `s.sort(key=None, reverse=False)` | Sorts the list **in-place** (can customize with `key=` and `reverse=`)       |
| `del s[i]`                        | Deletes the item at index `i`                                                |
| `del s[i:j]`                      | Deletes a **slice** of items from index `i` to `j`                           |



### Example

```python
numbers = [3, 1, 4]
numbers.append(2)        # [3, 1, 4, 2]
numbers.insert(1, 10)    # [3, 10, 1, 4, 2]
numbers.sort()           # [1, 2, 3, 4, 10]
numbers.pop()            # removes 10 → [1, 2, 3, 4]
```



