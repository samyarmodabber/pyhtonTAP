# Text Sequence Type

## Introduction

In Python, the **`str`** type represents **textual data** — it’s one of the most commonly used built-in types. A `str` is an **immutable sequence of Unicode characters**.

```python
name = "Samyar"
print(type(name))  # <class 'str'>
```

#### Creating Strings

```python
s1 = 'hello'
s2 = "world"
```

#### Multiline Strings

```python
poem = """Roses are red,
Violets are blue,
Python is awesome,
And so are you."""
```

## String Formatting

```python
name = "John"
age = 30

# .format()
print("My name is {} and I am {}".format(name, age))

# f-string (Python 3.6+)
print(f"My name is {name} and I am {age}")

```

Here's a clear explanation and example for each **basic operation on strings** in Python, organized in a readable table format:

---

### Basic Operations

| **Operation**  | **Description**                                | **Example**          | **Output**      |
| -------------- | ---------------------------------------------- | -------------------- | --------------- |
| `+`            | Concatenation – combines two strings           | `'Hello' + ' World'` | `'Hello World'` |
| `*`            | Repetition – repeats a string                  | `'Ha' * 3`           | `'HaHaHa'`      |
| `len(s)`       | Returns the length of the string               | `len('hello')`       | `5`             |
| `s[i]`         | Indexing – gets character at index i           | `'hello'[1]`         | `'e'`           |
| `s[start:end]` | Slicing – substring from `start` to `end-1`    | `'hello'[1:4]`       | `'ell'`         |
| `in`           | Membership test – checks if a substring exists | `'lo' in 'hello'`     | `True`          |
| `not in`       | Negated membership test                        | `'z' not in 'hello'` | `True`          |

### Notes:

* **Indexing** starts at `0`, so `'hello'[1]` is the second character, `'e'`.
* **Slicing** does **not** include the character at the `end` index.
* The `in` and `not in` operations are useful in conditionals and loops.

## Common String Methods

| Method           | Description                        | Example                                |
| ---------------- | ---------------------------------- | -------------------------------------- |
| `.lower()`       | Lowercase                          | `'Hello'.lower()` → `'hello'`          |
| `.upper()`       | Uppercase                          | `'hi'.upper()` → `'HI'`                |
| `.strip()`       | Remove leading/trailing whitespace | `'  hi  '.strip()` → `'hi'`            |
| `.replace(a, b)` | Replace substring                  | `'abc'.replace('a', 'x')` → `'xbc'`    |
| `.split()`       | Split by spaces (or delimiter)     | `'a,b,c'.split(',')` → `['a','b','c']` |
| `.join(list)`    | Join list into a string            | `'-'.join(['a','b'])` → `'a-b'`        |
| `.find('x')`     | Find index of first occurrence     | `'hello'.find('e')` → `1`              |
| `.startswith(x)` | Check if string starts with `x`    | `'abc'.startswith('a')`                |
| `.endswith(x)`   | Check if string ends with `x`      | `'abc'.endswith('c')`                  |

## Immutability

Strings are **immutable**. It means you can not modify (delete,add,update) any part of a string:

```python
s = "hello"
s[0] = "H"  # TypeError
```

To modify a string, you must create a new one:

```python
s = "hello"
s = "H" + s[1:]  # 'Hello'
```

## All String Methods
Here is a complete list of **all standard string (`str`) methods** in Python, along with a short description and example usage.


| **Method**              | **Description**                                              | **Example**                                     |
| ----------------------- | ------------------------------------------------------------ | ----------------------------------------------- |
| `capitalize()`          | Capitalizes first character                                  | `"hello".capitalize()` → `'Hello'`              |
| `casefold()`            | Case-insensitive lowercase (more aggressive than `.lower()`) | `"Straße".casefold()` → `'strasse'`             |
| `center(width, fill)`   | Centers string with optional fill                            | `'hi'.center(6, '*')` → `'**hi**'`              |
| `count(sub)`            | Count occurrences of a substring                             | `'banana'.count('a')` → `3`                     |
| `encode()`              | Encodes string to bytes                                      | `'hello'.encode()`                              |
| `endswith(suffix)`      | Checks if string ends with `suffix`                          | `'file.txt'.endswith('.txt')`                   |
| `expandtabs(tabsize)`   | Expands `\t` into spaces                                     | `'a\tb'.expandtabs(4)` → `'a   b'`              |
| `find(sub)`             | First index of `sub`, -1 if not found                        | `'hello'.find('e')` → `1`                       |
| `format()`              | Formats string                                               | `"{} {}".format('Hi', 'Samyar')`                |
| `format_map(mapping)`   | Like `format()`, but uses a dict                             | `"{name}".format_map({'name': 'Samyar'})`       |
| `index(sub)`            | Like `find()`, but raises error if not found                 | `'hello'.index('e')` → `1`                      |
| `isalnum()`             | Returns `True` if all chars are alphanumeric                 | `'abc123'.isalnum()`                            |
| `isalpha()`             | Returns `True` if all chars are letters                      | `'abc'.isalpha()`                               |
| `isascii()`             | `True` if all chars are ASCII                                | `'abc'.isascii()`                               |
| `isdecimal()`           | `True` if all chars are decimal numbers (e.g., `'123'`)      | `'123'.isdecimal()`                             |
| `isdigit()`             | `True` if all chars are digits                               | `'²3'.isdigit()` → `True`                       |
| `isidentifier()`        | `True` if string is a valid Python identifier                | `'my_var'.isidentifier()`                       |
| `islower()`             | `True` if all letters are lowercase                          | `'abc'.islower()`                               |
| `isnumeric()`           | `True` if all chars are numeric (includes superscripts etc.) | `'Ⅻ'.isnumeric()`                               |
| `isprintable()`         | `True` if all chars are printable                            | `'hello'.isprintable()`                         |
| `isspace()`             | `True` if all chars are whitespace                           | `'   '.isspace()`                               |
| `istitle()`             | `True` if string is title-cased                              | `'Hello World'.istitle()`                       |
| `isupper()`             | `True` if all letters are uppercase                          | `'ABC'.isupper()`                               |
| `join(iterable)`        | Joins elements with string as separator                      | `'-'.join(['a', 'b'])` → `'a-b'`                |
| `ljust(width)`          | Left-justify string                                          | `'hi'.ljust(5)` → `'hi   '`                     |
| `lower()`               | Converts to lowercase                                        | `'HI'.lower()`                                  |
| `lstrip()`              | Removes leading whitespace or chars                          | `'  hello'.lstrip()`                            |
| `maketrans()`           | Create translation table for `translate()`                   | –                                               |
| `partition(sep)`        | Split into 3-part tuple at first `sep`                       | `'a=b'.partition('=')` → `('a', '=', 'b')`      |
| `removeprefix(prefix)`  | Removes the prefix if present (Python 3.9+)                  | `'unittest'.removeprefix('unit')` → `'test'`    |
| `removesuffix(suffix)`  | Removes the suffix if present (Python 3.9+)                  | `'filename.txt'.removesuffix('.txt')`           |
| `replace(old, new)`     | Replace substrings                                           | `'abc'.replace('a', 'x')`                       |
| `rfind(sub)`            | Last index of `sub`, -1 if not found                         | `'hello'.rfind('l')`                            |
| `rindex(sub)`           | Like `rfind()`, but raises error if not found                | `'hello'.rindex('l')`                           |
| `rjust(width)`          | Right-justify string                                         | `'hi'.rjust(5)`                                 |
| `rpartition(sep)`       | Like `partition()`, but splits at last occurrence            | `'a=b=c'.rpartition('=')` → `('a=b', '=', 'c')` |
| `rsplit(sep, maxsplit)` | Split from right                                             | `'a,b,c'.rsplit(',', 1)` → `['a,b', 'c']`       |
| `rstrip()`              | Remove trailing whitespace or chars                          | `'hi  '.rstrip()`                               |
| `split(sep, maxsplit)`  | Split string into list                                       | `'a,b,c'.split(',')`                            |
| `splitlines()`          | Split at line boundaries                                     | `'a\nb'.splitlines()` → `['a', 'b']`            |
| `startswith(prefix)`    | Check if string starts with prefix                           | `'hello'.startswith('h')`                       |
| `strip()`               | Remove leading/trailing whitespace or chars                  | `'  hi  '.strip()`                              |
| `swapcase()`            | Swap case of letters                                         | `'Hello'.swapcase()` → `'hELLO'`                |
| `title()`               | Convert to title case                                        | `'hello world'.title()`                         |
| `translate(map)`        | Translate using `str.maketrans()` table                      | –                                               |
| `upper()`               | Convert to uppercase                                         | `'hi'.upper()`                                  |
| `zfill(width)`          | Pad string on the left with zeros                            | `'42'.zfill(5)` → `'00042'`                     |


**Example**

```python
s = " Hello World! "
print(s.lower())         # " hello world! "
print(s.strip())         # "Hello World!"
print(s.replace("World", "Python"))  # " Hello Python! "
```

