# Set Type

## Introduction
In Python, `set` and `frozenset` are **unordered collections of unique elements**. Here's a breakdown:

### Set

* **Mutable**: You can add or remove elements.
* **Unordered**: Elements have no specific order.
* **No duplicates allowed**.

#### Example:

```python
s = {1, 2, 3, 2}
print(s)  # Output: {1, 2, 3}
```

#### Common methods:

```python
s.add(4)
s.remove(2)
s.discard(5)  # No error if not found
s.pop()       # Removes a random element
s.clear()     # Empties the set
```

#### Set Operations:

```python
a = {1, 2, 3}
b = {3, 4, 5}

a | b   # Union → {1, 2, 3, 4, 5}
a & b   # Intersection → {3}
a - b   # Difference → {1, 2}
a ^ b   # Symmetric difference → {1, 2, 4, 5}
```

### Frozenset

* **Immutable**: Cannot change after creation.
* Useful as keys in dictionaries or elements of other sets.
* Supports the same set operations, but **no add/remove**.

#### Example:

```python
fs = frozenset([1, 2, 3, 3])
print(fs)  # Output: frozenset({1, 2, 3})
```


### Use Cases and compate:

| Type        | Use Case                                     |
| ----------- | -------------------------------------------- |
| `set`       | When you need to modify elements             |
| `frozenset` | When you need immutability (e.g., dict keys) |


## Methods 

Here’s a complete list of **methods and operations** supported by `set` and `frozenset` in Python:


### Set Methods (mutable)

| Method                               | Description                                              |
| ------------------------------------ | -------------------------------------------------------- |
| `add(elem)`                          | Adds `elem` to the set                                   |
| `remove(elem)`                       | Removes `elem`; raises `KeyError` if not found           |
| `discard(elem)`                      | Removes `elem` if present; no error if not found         |
| `pop()`                              | Removes and returns an arbitrary element                 |
| `clear()`                            | Removes all elements                                     |
| `update(*others)`                    | Adds elements from other sets/iterables (union in-place) |
| `intersection_update(*others)`       | Intersects with other sets in-place                      |
| `difference_update(*others)`         | Subtracts elements found in others                       |
| `symmetric_difference_update(other)` | Keeps elements in either set but not both                |
| `copy()`                             | Returns a shallow copy                                   |


###  `set` & `frozenset` Common Methods (both support these)

| Method                        | Description                                 |
| ----------------------------- | ------------------------------------------- |
| `union(*others)`              | Returns the union (all unique elements)     |
| `intersection(*others)`       | Returns common elements                     |
| `difference(*others)`         | Returns elements in this set but not others |
| `symmetric_difference(other)` | Returns elements in either but not both     |
| `issubset(other)`             | Checks if set is a subset                   |
| `issuperset(other)`           | Checks if set is a superset                 |
| `isdisjoint(other)`           | Checks if sets have no elements in common   |


### Only `frozenset` lacks:

* `add()`, `remove()`, `discard()`, `pop()`, `clear()`, and all `*_update()` methods — since it's **immutable**.


### Set Operators

| Operator | Description          | Example                      |
| -------- | -------------------- | ---------------------------- | 
| `a | b`  | Union                | `{1, 2} | {2, 3}`→`{1, 2, 3}`|
| `a & b`  | Intersection         | `{1, 2} & {2, 3}` → `{2}`    |
| `a - b`  | Difference           | `{1, 2} - {2}` → `{1}`       |
| `a ^ b`  | Symmetric Difference | `{1, 2} ^ {2, 3}` → `{1, 3}` |
| `a <= b` | Subset               | `{1, 2} <= {1, 2, 3}`        |
| `a >= b` | Superset             | `{1, 2, 3} >= {1}`           |
| `a == b` | Equality             | `{1, 2} == {2, 1}`           |
| `a != b` | Not Equal            | `{1, 2} != {3}`              |


## Examples

### Set Examples (mutable)
Here’s a list of **Python `set` and `frozenset` methods** with examples:

```python
# Create a set
s = {1, 2, 3}
```

#### Add

```python
s.add(4)         # {1, 2, 3, 4}
```

#### Remove

```python
s.remove(2)      # {1, 3, 4}
# s.remove(99) → KeyError if not found
```

#### Discard (safe remove)

```python
s.discard(99)    # No error if 99 is not found
```

#### Pop (removes a random item)

```python
item = s.pop()   # e.g., 1 → set becomes {3, 4}
```

#### Clear

```python
s.clear()        # set becomes {}
```

#### Update (Union in-place)

```python
a = {1, 2}
a.update([2, 3])     # {1, 2, 3}
```

#### Intersection Update

```python
a = {1, 2, 3}
a.intersection_update({2, 3, 4})   # {2, 3}
```

#### Difference Update

```python
a = {1, 2, 3}
a.difference_update({2})          # {1, 3}
```

#### Symmetric Difference Update

```python
a = {1, 2}
a.symmetric_difference_update({2, 3})  # {1, 3}
```


#### Set Operations

```python
a = {1, 2, 3}
b = {3, 4, 5}

a.union(b)                 # {1, 2, 3, 4, 5}
a.intersection(b)          # {3}
a.difference(b)            # {1, 2}
a.symmetric_difference(b)  # {1, 2, 4, 5}
```

#### Subset / Superset / Disjoint

```python
a = {1, 2}
b = {1, 2, 3}

a.issubset(b)        # True
b.issuperset(a)      # True
a.isdisjoint({3, 4}) # True
```

### Frozenset Examples (immutable)

```python
fs1 = frozenset([1, 2, 3])
fs2 = frozenset([2, 3, 4])

fs1.union(fs2)                 # frozenset({1, 2, 3, 4})
fs1.intersection(fs2)          # frozenset({2, 3})
fs1.difference(fs2)            # frozenset({1})
fs1.symmetric_difference(fs2)  # frozenset({1, 4})
fs1.issubset(fs2)              # False
```
#### Fails (immutable):

```python
fs1.add(4)        # ❌ AttributeError
fs1.remove(2)     # ❌ AttributeError
```
