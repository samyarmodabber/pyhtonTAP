# Mapping Types

In Python, a **`dict` (dictionary)** is the primary **mapping type**. It maps **keys to values**, allowing fast lookup, insertion, and deletion.

## Creating a Dictionary

```python
# Using curly braces
person = {'name': 'Alice', 'age': 30}

# Using dict() constructor
data = dict(country='Germany', capital='Berlin')
```

## Dictionary's Feature

| Feature            | Description                                    |
| ------------------ | ---------------------------------------------- |
| **Type**           | `dict`                                         |
| **Mutable**        | ✅ Yes                                          |
| **Ordered**        | ✅ Yes (since Python 3.7+)                      |
| **Key uniqueness** | ✅ Keys must be unique                          |
| **Key types**      | Must be hashable (e.g., `str`, `int`, `tuple`) |


## Accessing and Modifying

```python
# Access
print(person['name'])      # Alice

# Add or update
person['age'] = 31

# Add new key
person['city'] = 'Berlin'
```

## Common Methods

| Method                  | Description                                               |
| ----------------------- | --------------------------------------------------------- |
| `d.get(key[, default])` | Returns value for key or `default` if key not found       |
| `d.keys()`              | Returns a view of keys                                    |
| `d.values()`            | Returns a view of values                                  |
| `d.items()`             | Returns a view of (key, value) pairs                      |
| `d.pop(key[, default])` | Removes key and returns its value                         |
| `d.popitem()`           | Removes and returns the **last inserted** (key, value)    |
| `d.update(other_dict)`  | Updates dictionary with key-value pairs from another dict |
| `d.clear()`             | Removes all items                                         |
| `key in d`              | Tests if a key exists in the dictionary                   |


## Looping Through a Dictionary

```python
for key in person:
    print(key, person[key])

# or
for key, value in person.items():
    print(f"{key}: {value}")
```

## Dictionary Comprehension

```python
squares = {x: x*x for x in range(5)}
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
```

## Notes

* Dictionaries are **not** sequences (like lists or tuples), but they are **iterable**.
* Keys must be **hashable** (e.g., strings, numbers, tuples of immutable types).
* Values can be of any type and duplicated.
